import { Injectable } from '@angular/core';
import * as i0 from "@angular/core";
export class NgxResizeObserverService {
    constructor(ngZone) {
        this.ngZone = ngZone;
        this.count = 0;
        this.elementMap = new Map();
        this.observer = null;
    }
    ngOnDestroy() {
        if (this.observer) {
            this.clearObserver();
        }
    }
    observe(element, callback, boxModel) {
        if (!this.observer) {
            this.observer = new ResizeObserver(resizes => {
                for (const resize of resizes) {
                    const cb = this.elementMap.get(resize.target);
                    if (cb) {
                        this.ngZone.run(() => {
                            cb(resize);
                        });
                    }
                }
            });
        }
        if (boxModel === 'border-box') {
            this.observer.observe(element, {
                box: 'border-box'
            });
        }
        else {
            this.observer.observe(element);
        }
        this.count += 1;
        this.elementMap.set(element, callback);
    }
    unobserve(element) {
        const cb = this.elementMap.get(element);
        if (cb && this.observer) {
            this.observer.unobserve(element);
            this.elementMap.delete(element);
            this.count -= 1;
            if (this.count === 0) {
                this.clearObserver();
            }
        }
    }
    clearObserver() {
        if (this.observer) {
            this.observer.disconnect();
        }
        this.observer = null;
        this.count = 0;
        this.elementMap = new Map();
    }
}
/** @nocollapse */ NgxResizeObserverService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.0.4", ngImport: i0, type: NgxResizeObserverService, deps: [{ token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Injectable });
/** @nocollapse */ NgxResizeObserverService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "15.0.4", ngImport: i0, type: NgxResizeObserverService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.0.4", ngImport: i0, type: NgxResizeObserverService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i0.NgZone }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LXJlc2l6ZS1vYnNlcnZlci5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vcHJvamVjdHMvbmd4LXJlc2l6ZS1vYnNlcnZlci9zcmMvbGliL25neC1yZXNpemUtb2JzZXJ2ZXIuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFxQixNQUFNLGVBQWUsQ0FBQzs7QUFnQjlELE1BQU0sT0FBTyx3QkFBd0I7SUFLakMsWUFBNkIsTUFBYztRQUFkLFdBQU0sR0FBTixNQUFNLENBQVE7UUFKbkMsVUFBSyxHQUFHLENBQUMsQ0FBQztRQUNWLGVBQVUsR0FBRyxJQUFJLEdBQUcsRUFBMEMsQ0FBQztRQUMvRCxhQUFRLEdBQTBCLElBQUksQ0FBQztJQUVELENBQUM7SUFFL0MsV0FBVztRQUNQLElBQUksSUFBSSxDQUFDLFFBQVEsRUFBRTtZQUNmLElBQUksQ0FBQyxhQUFhLEVBQUUsQ0FBQztTQUN4QjtJQUNMLENBQUM7SUFFRCxPQUFPLENBQ0gsT0FBZ0IsRUFDaEIsUUFBdUMsRUFDdkMsUUFBZ0I7UUFFaEIsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUU7WUFDaEIsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLGNBQWMsQ0FBQyxPQUFPLENBQUMsRUFBRTtnQkFDekMsS0FBSyxNQUFNLE1BQU0sSUFBSSxPQUFPLEVBQUU7b0JBQzFCLE1BQU0sRUFBRSxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQztvQkFFOUMsSUFBSSxFQUFFLEVBQUU7d0JBQ0osSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFOzRCQUNqQixFQUFFLENBQUMsTUFBTSxDQUFDLENBQUM7d0JBQ2YsQ0FBQyxDQUFDLENBQUM7cUJBQ047aUJBQ0o7WUFDTCxDQUFDLENBQUMsQ0FBQztTQUNOO1FBRUQsSUFBSSxRQUFRLEtBQUssWUFBWSxFQUFFO1lBQzNCLElBQUksQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLE9BQU8sRUFBRTtnQkFDM0IsR0FBRyxFQUFFLFlBQVk7YUFDcEIsQ0FBQyxDQUFDO1NBQ047YUFBTTtZQUNILElBQUksQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1NBQ2xDO1FBRUQsSUFBSSxDQUFDLEtBQUssSUFBSSxDQUFDLENBQUM7UUFDaEIsSUFBSSxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsT0FBTyxFQUFFLFFBQVEsQ0FBQyxDQUFDO0lBQzNDLENBQUM7SUFFRCxTQUFTLENBQUMsT0FBZ0I7UUFDdEIsTUFBTSxFQUFFLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLENBQUM7UUFFeEMsSUFBSSxFQUFFLElBQUksSUFBSSxDQUFDLFFBQVEsRUFBRTtZQUNyQixJQUFJLENBQUMsUUFBUSxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsQ0FBQztZQUNqQyxJQUFJLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQztZQUNoQyxJQUFJLENBQUMsS0FBSyxJQUFJLENBQUMsQ0FBQztZQUVoQixJQUFJLElBQUksQ0FBQyxLQUFLLEtBQUssQ0FBQyxFQUFFO2dCQUNsQixJQUFJLENBQUMsYUFBYSxFQUFFLENBQUM7YUFDeEI7U0FDSjtJQUNMLENBQUM7SUFFTyxhQUFhO1FBQ2pCLElBQUksSUFBSSxDQUFDLFFBQVEsRUFBRTtZQUNmLElBQUksQ0FBQyxRQUFRLENBQUMsVUFBVSxFQUFFLENBQUM7U0FDOUI7UUFFRCxJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQztRQUNyQixJQUFJLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQztRQUNmLElBQUksQ0FBQyxVQUFVLEdBQUcsSUFBSSxHQUFHLEVBQTBDLENBQUM7SUFDeEUsQ0FBQzs7d0lBbEVRLHdCQUF3Qjs0SUFBeEIsd0JBQXdCOzJGQUF4Qix3QkFBd0I7a0JBRHBDLFVBQVUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlLCBOZ1pvbmUsIE9uRGVzdHJveSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5leHBvcnQgaW50ZXJmYWNlIFJlc2l6ZU9ic2VydmVyQm94U2l6ZSB7XG4gICAgYmxvY2tTaXplOiBudW1iZXI7IC8vIGhlaWdodCBpZiBob3Jpem9udGFsIHdyaXRpbmcgbW9kZSwgd2lkdGggb3RoZXJ3aXNlXG4gICAgaW5saW5lU2l6ZTogbnVtYmVyOyAvLyB3aWR0aCBpZiBob3Jpem9udGFsIHdyaXRpbmcgbW9kZSwgaGVpZ2h0IG90aGVyd2lzZVxufVxuXG5leHBvcnQgdHlwZSBSZXNpemVPYnNlcnZlckNhbGxiYWNrID0gKHJlc2l6ZXM6IFJlc2l6ZU9ic2VydmVyRW50cnlbXSwgb2JzZXJ2ZXI6IFJlc2l6ZU9ic2VydmVyKSA9PiB2b2lkO1xuXG5leHBvcnQgaW50ZXJmYWNlIFJlc2l6ZU9ic2VydmVyQ29uZmlnIHtcbiAgICBib3g/OiAnY29udGVudC1ib3gnIHwgJ2JvcmRlci1ib3gnO1xufVxuXG5leHBvcnQgdHlwZSBSZXNpemVPYnNlcnZlclNlcnZpY2VDYWxsYmFjayA9IChyZXNpemU6IFJlc2l6ZU9ic2VydmVyRW50cnkpID0+IHZvaWQ7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBOZ3hSZXNpemVPYnNlcnZlclNlcnZpY2UgaW1wbGVtZW50cyBPbkRlc3Ryb3kge1xuICAgIHByaXZhdGUgY291bnQgPSAwO1xuICAgIHByaXZhdGUgZWxlbWVudE1hcCA9IG5ldyBNYXA8RWxlbWVudCwgUmVzaXplT2JzZXJ2ZXJTZXJ2aWNlQ2FsbGJhY2s+KCk7XG4gICAgcHJpdmF0ZSBvYnNlcnZlcjogUmVzaXplT2JzZXJ2ZXIgfCBudWxsID0gbnVsbDtcblxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgcmVhZG9ubHkgbmdab25lOiBOZ1pvbmUpIHt9XG5cbiAgICBuZ09uRGVzdHJveSgpIHtcbiAgICAgICAgaWYgKHRoaXMub2JzZXJ2ZXIpIHtcbiAgICAgICAgICAgIHRoaXMuY2xlYXJPYnNlcnZlcigpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgb2JzZXJ2ZShcbiAgICAgICAgZWxlbWVudDogRWxlbWVudCxcbiAgICAgICAgY2FsbGJhY2s6IFJlc2l6ZU9ic2VydmVyU2VydmljZUNhbGxiYWNrLFxuICAgICAgICBib3hNb2RlbDogc3RyaW5nXG4gICAgKSB7XG4gICAgICAgIGlmICghdGhpcy5vYnNlcnZlcikge1xuICAgICAgICAgICAgdGhpcy5vYnNlcnZlciA9IG5ldyBSZXNpemVPYnNlcnZlcihyZXNpemVzID0+IHtcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IHJlc2l6ZSBvZiByZXNpemVzKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGNiID0gdGhpcy5lbGVtZW50TWFwLmdldChyZXNpemUudGFyZ2V0KTtcblxuICAgICAgICAgICAgICAgICAgICBpZiAoY2IpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubmdab25lLnJ1bigoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2IocmVzaXplKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoYm94TW9kZWwgPT09ICdib3JkZXItYm94Jykge1xuICAgICAgICAgICAgdGhpcy5vYnNlcnZlci5vYnNlcnZlKGVsZW1lbnQsIHtcbiAgICAgICAgICAgICAgICBib3g6ICdib3JkZXItYm94J1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLm9ic2VydmVyLm9ic2VydmUoZWxlbWVudCk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmNvdW50ICs9IDE7XG4gICAgICAgIHRoaXMuZWxlbWVudE1hcC5zZXQoZWxlbWVudCwgY2FsbGJhY2spO1xuICAgIH1cblxuICAgIHVub2JzZXJ2ZShlbGVtZW50OiBFbGVtZW50KSB7XG4gICAgICAgIGNvbnN0IGNiID0gdGhpcy5lbGVtZW50TWFwLmdldChlbGVtZW50KTtcblxuICAgICAgICBpZiAoY2IgJiYgdGhpcy5vYnNlcnZlcikge1xuICAgICAgICAgICAgdGhpcy5vYnNlcnZlci51bm9ic2VydmUoZWxlbWVudCk7XG4gICAgICAgICAgICB0aGlzLmVsZW1lbnRNYXAuZGVsZXRlKGVsZW1lbnQpO1xuICAgICAgICAgICAgdGhpcy5jb3VudCAtPSAxO1xuXG4gICAgICAgICAgICBpZiAodGhpcy5jb3VudCA9PT0gMCkge1xuICAgICAgICAgICAgICAgIHRoaXMuY2xlYXJPYnNlcnZlcigpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBjbGVhck9ic2VydmVyKCkge1xuICAgICAgICBpZiAodGhpcy5vYnNlcnZlcikge1xuICAgICAgICAgICAgdGhpcy5vYnNlcnZlci5kaXNjb25uZWN0KCk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLm9ic2VydmVyID0gbnVsbDtcbiAgICAgICAgdGhpcy5jb3VudCA9IDA7XG4gICAgICAgIHRoaXMuZWxlbWVudE1hcCA9IG5ldyBNYXA8RWxlbWVudCwgUmVzaXplT2JzZXJ2ZXJTZXJ2aWNlQ2FsbGJhY2s+KCk7XG4gICAgfVxufVxuIl19