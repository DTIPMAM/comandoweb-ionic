import { Directive, EventEmitter, Input, Output } from '@angular/core';
import * as i0 from "@angular/core";
import * as i1 from "./ngx-resize-observer.service";
export class NgxResizeObserverDirective {
    constructor(elementRef, ngxResizeObserverService) {
        this.elementRef = elementRef;
        this.ngxResizeObserverService = ngxResizeObserverService;
        this.resizeBoxModel = '';
        this.onResize = new EventEmitter();
        this.observing = false;
    }
    ngAfterViewInit() {
        this.observe();
    }
    ngOnChanges(changes) {
        if (this.observing && (changes['resizeBoxModel'] || changes['onResize'])) {
            this.unobserve();
            this.observe();
        }
    }
    ngOnDestroy() {
        this.unobserve();
    }
    observe() {
        if (!this.observing) {
            this.ngxResizeObserverService.observe(this.elementRef.nativeElement, resize => this.onResize.emit(resize), this.resizeBoxModel);
            this.observing = true;
        }
    }
    unobserve() {
        if (this.observing) {
            this.ngxResizeObserverService.unobserve(this.elementRef.nativeElement);
            this.observing = false;
        }
    }
}
/** @nocollapse */ NgxResizeObserverDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.0.4", ngImport: i0, type: NgxResizeObserverDirective, deps: [{ token: i0.ElementRef }, { token: i1.NgxResizeObserverService }], target: i0.ɵɵFactoryTarget.Directive });
/** @nocollapse */ NgxResizeObserverDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "15.0.4", type: NgxResizeObserverDirective, selector: "[onResize]", inputs: { resizeBoxModel: "resizeBoxModel" }, outputs: { onResize: "onResize" }, usesOnChanges: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.0.4", ngImport: i0, type: NgxResizeObserverDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[onResize]'
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i1.NgxResizeObserverService }]; }, propDecorators: { resizeBoxModel: [{
                type: Input
            }], onResize: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LXJlc2l6ZS1vYnNlcnZlci5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9wcm9qZWN0cy9uZ3gtcmVzaXplLW9ic2VydmVyL3NyYy9saWIvbmd4LXJlc2l6ZS1vYnNlcnZlci5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUVILFNBQVMsRUFFVCxZQUFZLEVBQ1osS0FBSyxFQUdMLE1BQU0sRUFFVCxNQUFNLGVBQWUsQ0FBQzs7O0FBU3ZCLE1BQU0sT0FBTywwQkFBMEI7SUFNbkMsWUFDcUIsVUFBc0IsRUFDdEIsd0JBQWtEO1FBRGxELGVBQVUsR0FBVixVQUFVLENBQVk7UUFDdEIsNkJBQXdCLEdBQXhCLHdCQUF3QixDQUEwQjtRQU45RCxtQkFBYyxHQUFHLEVBQUUsQ0FBQztRQUNuQixhQUFRLEdBQUcsSUFBSSxZQUFZLEVBQXVCLENBQUM7UUFDckQsY0FBUyxHQUFHLEtBQUssQ0FBQztJQUt2QixDQUFDO0lBRUosZUFBZTtRQUNYLElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQztJQUNuQixDQUFDO0lBRUQsV0FBVyxDQUFDLE9BQXNCO1FBQzlCLElBQUksSUFBSSxDQUFDLFNBQVMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLE9BQU8sQ0FBQyxVQUFVLENBQUMsQ0FBQyxFQUFFO1lBQ3RFLElBQUksQ0FBQyxTQUFTLEVBQUUsQ0FBQztZQUNqQixJQUFJLENBQUMsT0FBTyxFQUFFLENBQUM7U0FDbEI7SUFDTCxDQUFDO0lBRUQsV0FBVztRQUNQLElBQUksQ0FBQyxTQUFTLEVBQUUsQ0FBQztJQUNyQixDQUFDO0lBRU8sT0FBTztRQUNYLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFO1lBQ2pCLElBQUksQ0FBQyx3QkFBd0IsQ0FBQyxPQUFPLENBQ2pDLElBQUksQ0FBQyxVQUFVLENBQUMsYUFBYSxFQUM3QixNQUFNLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxFQUNwQyxJQUFJLENBQUMsY0FBYyxDQUN0QixDQUFDO1lBQ0YsSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUM7U0FDekI7SUFDTCxDQUFDO0lBRU8sU0FBUztRQUNiLElBQUksSUFBSSxDQUFDLFNBQVMsRUFBRTtZQUNoQixJQUFJLENBQUMsd0JBQXdCLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsYUFBYSxDQUFDLENBQUM7WUFDdkUsSUFBSSxDQUFDLFNBQVMsR0FBRyxLQUFLLENBQUM7U0FDMUI7SUFDTCxDQUFDOzswSUExQ1EsMEJBQTBCOzhIQUExQiwwQkFBMEI7MkZBQTFCLDBCQUEwQjtrQkFIdEMsU0FBUzttQkFBQztvQkFDUCxRQUFRLEVBQUUsWUFBWTtpQkFDekI7d0lBR1ksY0FBYztzQkFBdEIsS0FBSztnQkFDSSxRQUFRO3NCQUFqQixNQUFNIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgICBBZnRlclZpZXdJbml0LFxuICAgIERpcmVjdGl2ZSxcbiAgICBFbGVtZW50UmVmLFxuICAgIEV2ZW50RW1pdHRlcixcbiAgICBJbnB1dCxcbiAgICBPbkNoYW5nZXMsXG4gICAgT25EZXN0cm95LFxuICAgIE91dHB1dCxcbiAgICBTaW1wbGVDaGFuZ2VzXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQge1xuICAgIE5neFJlc2l6ZU9ic2VydmVyU2VydmljZSxcbn0gZnJvbSAnLi9uZ3gtcmVzaXplLW9ic2VydmVyLnNlcnZpY2UnO1xuXG5ARGlyZWN0aXZlKHtcbiAgICBzZWxlY3RvcjogJ1tvblJlc2l6ZV0nXG59KVxuZXhwb3J0IGNsYXNzIE5neFJlc2l6ZU9ic2VydmVyRGlyZWN0aXZlXG4gICAgaW1wbGVtZW50cyBBZnRlclZpZXdJbml0LCBPbkNoYW5nZXMsIE9uRGVzdHJveSB7XG4gICAgQElucHV0KCkgcmVzaXplQm94TW9kZWwgPSAnJztcbiAgICBAT3V0cHV0KCkgb25SZXNpemUgPSBuZXcgRXZlbnRFbWl0dGVyPFJlc2l6ZU9ic2VydmVyRW50cnk+KCk7XG4gICAgcHJpdmF0ZSBvYnNlcnZpbmcgPSBmYWxzZTtcblxuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBwcml2YXRlIHJlYWRvbmx5IGVsZW1lbnRSZWY6IEVsZW1lbnRSZWYsXG4gICAgICAgIHByaXZhdGUgcmVhZG9ubHkgbmd4UmVzaXplT2JzZXJ2ZXJTZXJ2aWNlOiBOZ3hSZXNpemVPYnNlcnZlclNlcnZpY2VcbiAgICApIHt9XG5cbiAgICBuZ0FmdGVyVmlld0luaXQoKSB7XG4gICAgICAgIHRoaXMub2JzZXJ2ZSgpO1xuICAgIH1cblxuICAgIG5nT25DaGFuZ2VzKGNoYW5nZXM6IFNpbXBsZUNoYW5nZXMpIHtcbiAgICAgICAgaWYgKHRoaXMub2JzZXJ2aW5nICYmIChjaGFuZ2VzWydyZXNpemVCb3hNb2RlbCddIHx8IGNoYW5nZXNbJ29uUmVzaXplJ10pKSB7XG4gICAgICAgICAgICB0aGlzLnVub2JzZXJ2ZSgpO1xuICAgICAgICAgICAgdGhpcy5vYnNlcnZlKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBuZ09uRGVzdHJveSgpIHtcbiAgICAgICAgdGhpcy51bm9ic2VydmUoKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIG9ic2VydmUoKSB7XG4gICAgICAgIGlmICghdGhpcy5vYnNlcnZpbmcpIHtcbiAgICAgICAgICAgIHRoaXMubmd4UmVzaXplT2JzZXJ2ZXJTZXJ2aWNlLm9ic2VydmUoXG4gICAgICAgICAgICAgICAgdGhpcy5lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQsXG4gICAgICAgICAgICAgICAgcmVzaXplID0+IHRoaXMub25SZXNpemUuZW1pdChyZXNpemUpLFxuICAgICAgICAgICAgICAgIHRoaXMucmVzaXplQm94TW9kZWxcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICB0aGlzLm9ic2VydmluZyA9IHRydWU7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcml2YXRlIHVub2JzZXJ2ZSgpIHtcbiAgICAgICAgaWYgKHRoaXMub2JzZXJ2aW5nKSB7XG4gICAgICAgICAgICB0aGlzLm5neFJlc2l6ZU9ic2VydmVyU2VydmljZS51bm9ic2VydmUodGhpcy5lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQpO1xuICAgICAgICAgICAgdGhpcy5vYnNlcnZpbmcgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgIH1cbn1cbiJdfQ==