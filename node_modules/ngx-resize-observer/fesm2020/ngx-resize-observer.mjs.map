{"version":3,"file":"ngx-resize-observer.mjs","sources":["../../../projects/ngx-resize-observer/src/lib/ngx-resize-observer.service.ts","../../../projects/ngx-resize-observer/src/lib/ngx-resize-observer.directive.ts","../../../projects/ngx-resize-observer/src/lib/ngx-resize-observer.module.ts","../../../projects/ngx-resize-observer/src/public-api.ts","../../../projects/ngx-resize-observer/src/ngx-resize-observer.ts"],"sourcesContent":["import { Injectable, NgZone, OnDestroy } from '@angular/core';\n\nexport interface ResizeObserverBoxSize {\n    blockSize: number; // height if horizontal writing mode, width otherwise\n    inlineSize: number; // width if horizontal writing mode, height otherwise\n}\n\nexport type ResizeObserverCallback = (resizes: ResizeObserverEntry[], observer: ResizeObserver) => void;\n\nexport interface ResizeObserverConfig {\n    box?: 'content-box' | 'border-box';\n}\n\nexport type ResizeObserverServiceCallback = (resize: ResizeObserverEntry) => void;\n\n@Injectable()\nexport class NgxResizeObserverService implements OnDestroy {\n    private count = 0;\n    private elementMap = new Map<Element, ResizeObserverServiceCallback>();\n    private observer: ResizeObserver | null = null;\n\n    constructor(private readonly ngZone: NgZone) {}\n\n    ngOnDestroy() {\n        if (this.observer) {\n            this.clearObserver();\n        }\n    }\n\n    observe(\n        element: Element,\n        callback: ResizeObserverServiceCallback,\n        boxModel: string\n    ) {\n        if (!this.observer) {\n            this.observer = new ResizeObserver(resizes => {\n                for (const resize of resizes) {\n                    const cb = this.elementMap.get(resize.target);\n\n                    if (cb) {\n                        this.ngZone.run(() => {\n                            cb(resize);\n                        });\n                    }\n                }\n            });\n        }\n\n        if (boxModel === 'border-box') {\n            this.observer.observe(element, {\n                box: 'border-box'\n            });\n        } else {\n            this.observer.observe(element);\n        }\n\n        this.count += 1;\n        this.elementMap.set(element, callback);\n    }\n\n    unobserve(element: Element) {\n        const cb = this.elementMap.get(element);\n\n        if (cb && this.observer) {\n            this.observer.unobserve(element);\n            this.elementMap.delete(element);\n            this.count -= 1;\n\n            if (this.count === 0) {\n                this.clearObserver();\n            }\n        }\n    }\n\n    private clearObserver() {\n        if (this.observer) {\n            this.observer.disconnect();\n        }\n\n        this.observer = null;\n        this.count = 0;\n        this.elementMap = new Map<Element, ResizeObserverServiceCallback>();\n    }\n}\n","import {\n    AfterViewInit,\n    Directive,\n    ElementRef,\n    EventEmitter,\n    Input,\n    OnChanges,\n    OnDestroy,\n    Output,\n    SimpleChanges\n} from '@angular/core';\n\nimport {\n    NgxResizeObserverService,\n} from './ngx-resize-observer.service';\n\n@Directive({\n    selector: '[onResize]'\n})\nexport class NgxResizeObserverDirective\n    implements AfterViewInit, OnChanges, OnDestroy {\n    @Input() resizeBoxModel = '';\n    @Output() onResize = new EventEmitter<ResizeObserverEntry>();\n    private observing = false;\n\n    constructor(\n        private readonly elementRef: ElementRef,\n        private readonly ngxResizeObserverService: NgxResizeObserverService\n    ) {}\n\n    ngAfterViewInit() {\n        this.observe();\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        if (this.observing && (changes['resizeBoxModel'] || changes['onResize'])) {\n            this.unobserve();\n            this.observe();\n        }\n    }\n\n    ngOnDestroy() {\n        this.unobserve();\n    }\n\n    private observe() {\n        if (!this.observing) {\n            this.ngxResizeObserverService.observe(\n                this.elementRef.nativeElement,\n                resize => this.onResize.emit(resize),\n                this.resizeBoxModel\n            );\n            this.observing = true;\n        }\n    }\n\n    private unobserve() {\n        if (this.observing) {\n            this.ngxResizeObserverService.unobserve(this.elementRef.nativeElement);\n            this.observing = false;\n        }\n    }\n}\n","import { NgModule } from '@angular/core';\n\nimport { NgxResizeObserverDirective } from './ngx-resize-observer.directive';\nimport { NgxResizeObserverService } from './ngx-resize-observer.service';\n\n@NgModule({\n    declarations: [NgxResizeObserverDirective],\n    exports: [NgxResizeObserverDirective],\n    providers: [NgxResizeObserverService]\n})\nexport class NgxResizeObserverModule {}\n","/*\n * Public API Surface of ngx-resize-observer\n */\n\nexport * from './lib/ngx-resize-observer.directive';\nexport * from './lib/ngx-resize-observer.module';\nexport * from './lib/ngx-resize-observer.service';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":["i1.NgxResizeObserverService"],"mappings":"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"}