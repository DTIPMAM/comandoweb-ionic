(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/common')) :
    typeof define === 'function' && define.amd ? define('ng-magnizoom', ['exports', '@angular/core', '@angular/common'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global['ng-magnizoom'] = {}, global.ng.core, global.ng.common));
}(this, (function (exports, i0, common) { 'use strict';

    var MagnizoomService = /** @class */ (function () {
        function MagnizoomService() {
        }
        return MagnizoomService;
    }());
    /** @nocollapse */ MagnizoomService.ɵprov = i0.ɵɵdefineInjectable({ factory: function MagnizoomService_Factory() { return new MagnizoomService(); }, token: MagnizoomService, providedIn: "root" });
    MagnizoomService.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    MagnizoomService.ctorParameters = function () { return []; };

    var NgMagnizoomComponent = /** @class */ (function () {
        function NgMagnizoomComponent() {
            this.zoomMode = 'COVER';
            this.minZoomFactor = 1.2;
            this.maxZoomFactor = 3;
            this.zoomFactor = 2;
            this.zoomFactorChange = new i0.EventEmitter();
            this.lensSizeUnit = 'NORMALIZED';
            this.lensSize = { width: 0.5, height: 0.5 };
            this.zoomCenterUnit = 'NORMALIZED';
            this.zoomCenterChange = new i0.EventEmitter();
            this.updateOnMouseEvents = true;
            this.imageReady = false;
        }
        Object.defineProperty(NgMagnizoomComponent.prototype, "canvasWidth", {
            get: function () { return this.image && this.image.width || 800; },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(NgMagnizoomComponent.prototype, "canvasHeight", {
            get: function () { return this.image && this.image.height || 600; },
            enumerable: false,
            configurable: true
        });
        NgMagnizoomComponent.prototype.ngOnInit = function () {
            this.initContext();
            this.loadImage(this.imageSrc);
        };
        NgMagnizoomComponent.prototype.ngOnChanges = function (changes) {
            if (!changes) {
                return;
            }
            if (changes.lensSize || changes.zoomCenter || changes.zoomFactor) {
                this.updateParameters();
            }
            if (changes.imageSrc && !changes.imageSrc.firstChange) {
                this.loadImage(changes.imageSrc.currentValue);
            }
        };
        NgMagnizoomComponent.prototype.initContext = function () {
            this.canvas = this.mainCanvasRef.nativeElement;
            this.context = this.canvas.getContext('2d');
        };
        NgMagnizoomComponent.prototype.loadImage = function (src) {
            var _this = this;
            this.image = new Image();
            this.image.onload = function () {
                _this.imageReady = true;
                _this.updateParameters();
                setTimeout(function () { return _this.update(); });
            };
            this.image.src = src;
        };
        NgMagnizoomComponent.prototype.updateParameters = function () {
            if (this.lensSizeUnit === 'NORMALIZED') {
                if (this.imageReady) {
                    this._lensSize = {
                        width: this.lensSize.width * this.image.width,
                        height: this.lensSize.height * this.image.height
                    };
                }
            }
            else {
                this._lensSize = {
                    width: this.lensSize.width,
                    height: this.lensSize.height
                };
            }
            if (!this.zoomCenter) {
                this._centerPosition = undefined;
            }
            else if (this.zoomCenterUnit === 'NORMALIZED') {
                if (this.imageReady) {
                    this._centerPosition = {
                        x: this.zoomCenter.x * this.image.width,
                        y: this.zoomCenter.y * this.image.height
                    };
                }
            }
            else {
                this._centerPosition = {
                    x: this.zoomCenter.x,
                    y: this.zoomCenter.y
                };
            }
            this._zoomFactor = this.zoomFactor;
            if (this._zoomFactor > this.maxZoomFactor) {
                this._zoomFactor = this.maxZoomFactor;
            }
            if (this._zoomFactor < this.minZoomFactor) {
                this._zoomFactor = this.minZoomFactor;
            }
            this.update();
        };
        NgMagnizoomComponent.prototype.update = function () {
            var _a, _b, _c, _d;
            this.render();
            var currUnitCenter, needUpdate = false;
            if (!this._centerPosition) {
                currUnitCenter = undefined;
                needUpdate = currUnitCenter !== this.zoomCenter;
            }
            else if (this.zoomCenterUnit === 'NORMALIZED') {
                if (this.imageReady) {
                    currUnitCenter = {
                        x: this._centerPosition.x / this.image.width,
                        y: this._centerPosition.y / this.image.height
                    };
                    needUpdate = currUnitCenter.x !== ((_a = this.zoomCenter) === null || _a === void 0 ? void 0 : _a.x) || currUnitCenter.y !== ((_b = this.zoomCenter) === null || _b === void 0 ? void 0 : _b.y);
                }
            }
            else {
                currUnitCenter = {
                    x: this._centerPosition.x,
                    y: this._centerPosition.y
                };
                needUpdate = currUnitCenter.x !== ((_c = this.zoomCenter) === null || _c === void 0 ? void 0 : _c.x) || currUnitCenter.y !== ((_d = this.zoomCenter) === null || _d === void 0 ? void 0 : _d.y);
            }
            if (needUpdate) {
                this.zoomCenterChange.emit(currUnitCenter);
            }
        };
        NgMagnizoomComponent.prototype.render = function () {
            if (!this.context || !this.imageReady) {
                return;
            }
            this.context.clearRect(0, 0, this.canvasWidth, this.canvasHeight); // clear canvas
            this.context.lineWidth = 1; // border width
            this.context.drawImage(this.image, 0, 0); // bg image
            if (this._centerPosition) {
                switch (this.zoomMode) {
                    case 'LENS':
                        this.renderLensMode();
                        break;
                    case 'COVER':
                        this.renderCoverMode();
                        break;
                }
            }
        };
        NgMagnizoomComponent.prototype.renderLensMode = function () {
            this.context.lineWidth = 5; // border width
            var zoomRect = this.getZoomRect();
            this.context.fillRect(zoomRect.x, zoomRect.y, zoomRect.w, zoomRect.h); // bg (clear)
            var clippingRect = this.getClippingRect();
            // zoom image
            this.context.drawImage(this.image, clippingRect.x, clippingRect.y, clippingRect.w, clippingRect.h, zoomRect.x, zoomRect.y, zoomRect.w, zoomRect.h);
            this.context.strokeRect(zoomRect.x, zoomRect.y, zoomRect.w, zoomRect.h); // border
        };
        NgMagnizoomComponent.prototype.renderCoverMode = function () {
            var covertRect = this.getCoverRect();
            this.context.drawImage(this.image, covertRect.x, covertRect.y, covertRect.w, covertRect.h, 0, 0, this.canvasWidth, this.canvasHeight); // cover image
        };
        NgMagnizoomComponent.prototype.getZoomRect = function () {
            var w = this._lensSize.width;
            var h = this._lensSize.height;
            var x = this._centerPosition.x - (w / 2);
            var y = this._centerPosition.y - (h / 2);
            return this.clampRect(x, y, w, h);
        };
        NgMagnizoomComponent.prototype.getClippingRect = function () {
            var w = this._lensSize.width / this._zoomFactor;
            var h = this._lensSize.height / this._zoomFactor;
            var x = this._centerPosition.x - (w / 2);
            var y = this._centerPosition.y - (h / 2);
            return this.clampRect(x, y, w, h);
        };
        NgMagnizoomComponent.prototype.getCoverRect = function () {
            var w = this.canvasWidth / this._zoomFactor;
            var h = this.canvasHeight / this._zoomFactor;
            // const x = this.mousePosition.x - (w / 2);
            // const y = this.mousePosition.y - (h / 2);
            var x = this._centerPosition.x - this._centerPosition.x / this._zoomFactor;
            var y = this._centerPosition.y - this._centerPosition.y / this._zoomFactor;
            return this.clampRect(x, y, w, h);
        };
        NgMagnizoomComponent.prototype.clampRect = function (x, y, w, h) {
            if (x <= 0) {
                x = 0;
            }
            if (x + w >= this.canvasWidth) {
                x = this.canvasWidth - w;
            }
            if (y < 0) {
                y = 0;
            }
            if (y + h >= this.canvasHeight) {
                y = this.canvasHeight - h;
            }
            return { x: x, y: y, w: w, h: h };
        };
        NgMagnizoomComponent.prototype.calculateMousePosition = function (clientX, clientY) {
            var boundingRect = this.canvas.getBoundingClientRect();
            var viewToModelX = this.canvasWidth / boundingRect.width;
            var viewToModelY = this.canvasHeight / boundingRect.height;
            var x = (clientX - boundingRect.left) * viewToModelX;
            var y = (clientY - boundingRect.top) * viewToModelY;
            this._centerPosition = { x: x, y: y };
        };
        NgMagnizoomComponent.prototype.onMouseLeave = function (event) {
            if (!this.updateOnMouseEvents) {
                return;
            }
            this._centerPosition = null;
            this.update();
        };
        NgMagnizoomComponent.prototype.onMouseEnterOrMove = function (event) {
            if (!this.updateOnMouseEvents) {
                return;
            }
            this.calculateMousePosition(event.clientX, event.clientY);
            this.update();
        };
        NgMagnizoomComponent.prototype.onMouseScroll = function (event) {
            if (!this.updateOnMouseEvents) {
                return;
            }
            var newZoomFactor = this._zoomFactor;
            newZoomFactor -= event.deltaY / 1000;
            if (newZoomFactor < this.minZoomFactor) {
                newZoomFactor = this.minZoomFactor;
            }
            if (newZoomFactor > this.maxZoomFactor) {
                newZoomFactor = this.maxZoomFactor;
            }
            if (this._zoomFactor !== newZoomFactor) {
                this._zoomFactor = newZoomFactor;
                if (this.zoomFactor !== this._zoomFactor) {
                    this.zoomFactorChange.emit(this._zoomFactor);
                }
                this.update();
            }
            event.preventDefault();
            event.stopPropagation();
        };
        return NgMagnizoomComponent;
    }());
    NgMagnizoomComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'ng-magnizoom',
                    template: "<canvas #mainCanvas\n  class=\"main-canvas\"\n  [ngClass]=\"imageClass\"\n  [ngStyle]=\"imageStyle\"\n  [width]=\"canvasWidth\"\n  [height]=\"canvasHeight\"\n  (mouseleave)=\"onMouseLeave($event)\"\n  (mouseenter)=\"onMouseEnterOrMove($event)\"\n  (mousemove)=\"onMouseEnterOrMove($event)\"\n  (wheel)=\"onMouseScroll($event)\">\n</canvas>\n",
                    styles: [""]
                },] }
    ];
    /** @nocollapse */
    NgMagnizoomComponent.ctorParameters = function () { return []; };
    NgMagnizoomComponent.propDecorators = {
        imageSrc: [{ type: i0.Input }],
        zoomMode: [{ type: i0.Input }],
        minZoomFactor: [{ type: i0.Input }],
        maxZoomFactor: [{ type: i0.Input }],
        zoomFactor: [{ type: i0.Input }],
        zoomFactorChange: [{ type: i0.Output }],
        lensSizeUnit: [{ type: i0.Input }],
        lensSize: [{ type: i0.Input }],
        zoomCenterUnit: [{ type: i0.Input }],
        zoomCenter: [{ type: i0.Input }],
        zoomCenterChange: [{ type: i0.Output }],
        updateOnMouseEvents: [{ type: i0.Input }],
        imageStyle: [{ type: i0.Input }],
        imageClass: [{ type: i0.Input }],
        mainCanvasRef: [{ type: i0.ViewChild, args: ['mainCanvas', { static: true },] }]
    };

    var NgMagnizoomModule = /** @class */ (function () {
        function NgMagnizoomModule() {
        }
        return NgMagnizoomModule;
    }());
    NgMagnizoomModule.decorators = [
        { type: i0.NgModule, args: [{
                    declarations: [NgMagnizoomComponent],
                    imports: [
                        common.CommonModule
                    ],
                    exports: [NgMagnizoomComponent]
                },] }
    ];

    /*
     * Public API Surface of ng-magnizoom
     */

    /**
     * Generated bundle index. Do not edit.
     */

    exports.MagnizoomService = MagnizoomService;
    exports.NgMagnizoomComponent = NgMagnizoomComponent;
    exports.NgMagnizoomModule = NgMagnizoomModule;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=ng-magnizoom.umd.js.map
