{"version":3,"sources":["../../../projects/ng-magnizoom/src/lib/magnizoom.service.ts","../../../projects/ng-magnizoom/src/lib/magnizoom.component.ts","../../../projects/ng-magnizoom/src/lib/magnizoom.module.ts"],"names":["Injectable","args","providedIn","NgMagnizoomComponent","this","zoomMode","minZoomFactor","maxZoomFactor","zoomFactor","zoomFactorChange","EventEmitter","lensSizeUnit","lensSize","width","height","zoomCenterUnit","zoomCenterChange","updateOnMouseEvents","imageReady","Object","defineProperty","prototype","image","ngOnInit","initContext","loadImage","imageSrc","ngOnChanges","changes","zoomCenter","updateParameters","firstChange","currentValue","canvas","mainCanvasRef","nativeElement","context","getContext","src","_this","Image","onload","setTimeout","update","_lensSize","_centerPosition","x","y","undefined","_zoomFactor","render","currUnitCenter","needUpdate","_a","_b","_c","_d","emit","clearRect","canvasWidth","canvasHeight","lineWidth","drawImage","renderLensMode","renderCoverMode","zoomRect","getZoomRect","fillRect","w","h","clippingRect","getClippingRect","strokeRect","covertRect","getCoverRect","clampRect","calculateMousePosition","clientX","clientY","boundingRect","getBoundingClientRect","viewToModelX","viewToModelY","left","top","onMouseLeave","event","onMouseEnterOrMove","onMouseScroll","newZoomFactor","deltaY","preventDefault","stopPropagation","Component","selector","template","Input","Output","ViewChild","static","NgModule","declarations","imports","CommonModule","exports"],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class MagnizoomService {\n\n  constructor() { }\n}\n","import type { ElementRef } from '@angular/core';\nimport { Component, OnInit, OnChanges, SimpleChanges, Input, Output, ViewChild, EventEmitter } from '@angular/core';\n\ninterface Size2D { width: number; height: number; }\ntype Point2D = { x: number, y: number } | null;\n\n@Component({\n  selector: 'ng-magnizoom',\n  templateUrl: './magnizoom.component.html',\n  styleUrls: ['./magnizoom.component.scss']\n})\nexport class NgMagnizoomComponent implements OnInit, OnChanges {\n\n  @Input() imageSrc: string;\n  @Input() zoomMode: 'LENS' | 'COVER' = 'COVER';\n  @Input() minZoomFactor = 1.2;\n  @Input() maxZoomFactor = 3;\n\n  @Input() zoomFactor = 2;\n  @Output() zoomFactorChange = new EventEmitter<number>();\n\n  @Input() lensSizeUnit: 'NORMALIZED' | 'PIXEL' = 'NORMALIZED';\n  @Input() lensSize: Size2D = { width: 0.5, height: 0.5 };\n\n  @Input() zoomCenterUnit: 'NORMALIZED' | 'PIXEL' = 'NORMALIZED';\n  @Input() zoomCenter?: Point2D;\n  @Output() zoomCenterChange = new EventEmitter<Point2D | undefined>();\n\n\n  @Input() updateOnMouseEvents = true;\n\n\n  @Input() imageStyle: { [x: string]: any; };\n  @Input() imageClass: any;\n\n  @ViewChild('mainCanvas', { static: true }) mainCanvasRef: ElementRef;\n\n  canvas: HTMLCanvasElement;\n  context: CanvasRenderingContext2D;\n  image: HTMLImageElement;\n\n  _centerPosition: Point2D;\n  _lensSize?: Size2D;\n  _zoomFactor: number;\n\n  imageReady = false;\n  get canvasWidth() { return this.image && this.image.width || 800; }\n  get canvasHeight() { return this.image && this.image.height || 600; }\n\n  constructor() { }\n\n  ngOnInit() {\n    this.initContext();\n    this.loadImage(this.imageSrc);\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (!changes) {\n      return;\n    }\n    if (changes.lensSize || changes.zoomCenter || changes.zoomFactor) {\n      this.updateParameters();\n    }\n    if (changes.imageSrc && !changes.imageSrc.firstChange) {\n      this.loadImage(changes.imageSrc.currentValue);\n    }\n  }\n\n  initContext() {\n    this.canvas = (this.mainCanvasRef.nativeElement as HTMLCanvasElement);\n    this.context = this.canvas.getContext('2d');\n  }\n\n  loadImage(src: string) {\n    this.image = new Image();\n    this.image.onload = () => {\n      this.imageReady = true;\n      this.updateParameters();\n      setTimeout(() => this.update());\n    };\n    this.image.src = src;\n  }\n\n  updateParameters() {\n    if (this.lensSizeUnit === 'NORMALIZED') {\n      if (this.imageReady) {\n        this._lensSize = {\n          width: this.lensSize.width * this.image.width,\n          height: this.lensSize.height * this.image.height\n        };\n      }\n    } else {\n      this._lensSize = {\n        width: this.lensSize.width,\n        height: this.lensSize.height\n      };\n    }\n\n    if (!this.zoomCenter) {\n      this._centerPosition = undefined;\n    } else if (this.zoomCenterUnit === 'NORMALIZED'){\n      if (this.imageReady) {\n        this._centerPosition = {\n          x: this.zoomCenter.x * this.image.width,\n          y: this.zoomCenter.y * this.image.height\n        };\n      }\n    } else {\n      this._centerPosition = {\n        x: this.zoomCenter.x,\n        y: this.zoomCenter.y\n      };\n    }\n\n    this._zoomFactor = this.zoomFactor;\n    if (this._zoomFactor > this.maxZoomFactor) {\n      this._zoomFactor = this.maxZoomFactor;\n    }\n    if (this._zoomFactor < this.minZoomFactor) {\n      this._zoomFactor = this.minZoomFactor;\n    }\n\n    this.update();\n  }\n\n  update() {\n    this.render();\n    let currUnitCenter: { x: number, y: number } | undefined, needUpdate = false;\n    if (!this._centerPosition) {\n      currUnitCenter = undefined;\n      needUpdate = currUnitCenter !== this.zoomCenter;\n    } else if (this.zoomCenterUnit === 'NORMALIZED') {\n      if (this.imageReady) {\n        currUnitCenter = {\n          x: this._centerPosition.x / this.image.width,\n          y: this._centerPosition.y / this.image.height\n        };\n        needUpdate = currUnitCenter.x !== this.zoomCenter?.x || currUnitCenter.y !== this.zoomCenter?.y;\n      }\n    } else {\n      currUnitCenter = {\n        x: this._centerPosition.x,\n        y: this._centerPosition.y\n      };\n      needUpdate = currUnitCenter.x !== this.zoomCenter?.x || currUnitCenter.y !== this.zoomCenter?.y;\n    }\n    if (needUpdate) {\n      this.zoomCenterChange.emit(currUnitCenter);\n    }\n  }\n\n  render() {\n    if (!this.context || !this.imageReady) {\n      return;\n    }\n\n    this.context.clearRect(0, 0, this.canvasWidth, this.canvasHeight); // clear canvas\n    this.context.lineWidth = 1; // border width\n    this.context.drawImage(this.image, 0, 0); // bg image\n\n    if (this._centerPosition) {\n      switch (this.zoomMode) {\n        case 'LENS': this.renderLensMode(); break;\n        case 'COVER': this.renderCoverMode(); break;\n      }\n    }\n  }\n\n  renderLensMode() {\n    this.context.lineWidth = 5; // border width\n    const zoomRect = this.getZoomRect();\n    this.context.fillRect(zoomRect.x, zoomRect.y, zoomRect.w, zoomRect.h); // bg (clear)\n    const clippingRect = this.getClippingRect();\n    // zoom image\n    this.context.drawImage(\n      this.image,\n      clippingRect.x, clippingRect.y, clippingRect.w, clippingRect.h,\n      zoomRect.x, zoomRect.y, zoomRect.w, zoomRect.h\n    );\n    this.context.strokeRect(zoomRect.x, zoomRect.y, zoomRect.w, zoomRect.h); // border\n  }\n\n  renderCoverMode() {\n    const covertRect = this.getCoverRect();\n    this.context.drawImage(\n      this.image,\n      covertRect.x, covertRect.y, covertRect.w, covertRect.h,\n      0, 0, this.canvasWidth, this.canvasHeight\n    ); // cover image\n  }\n\n  getZoomRect() {\n    const w = this._lensSize.width;\n    const h = this._lensSize.height;\n    const x = this._centerPosition.x - (w / 2);\n    const y = this._centerPosition.y - (h / 2);\n    return this.clampRect(x, y, w, h);\n  }\n\n  getClippingRect() {\n    const w = this._lensSize.width / this._zoomFactor;\n    const h = this._lensSize.height / this._zoomFactor;\n    const x = this._centerPosition.x - (w / 2);\n    const y = this._centerPosition.y - (h / 2);\n    return this.clampRect(x, y, w, h);\n  }\n\n  getCoverRect() {\n    const w = this.canvasWidth / this._zoomFactor;\n    const h = this.canvasHeight / this._zoomFactor;\n    // const x = this.mousePosition.x - (w / 2);\n    // const y = this.mousePosition.y - (h / 2);\n    const x = this._centerPosition.x - this._centerPosition.x / this._zoomFactor;\n    const y = this._centerPosition.y - this._centerPosition.y / this._zoomFactor;\n    return this.clampRect(x, y, w, h);\n  }\n\n  clampRect(x: number, y: number, w: number, h: number) {\n    if (x <= 0) { x = 0; }\n    if (x + w >= this.canvasWidth) { x = this.canvasWidth - w; }\n    if (y < 0) { y = 0; }\n    if (y + h >= this.canvasHeight) { y = this.canvasHeight - h; }\n    return { x, y, w, h };\n  }\n\n  calculateMousePosition(clientX: number, clientY: number) {\n    const boundingRect = this.canvas.getBoundingClientRect();\n    const viewToModelX = this.canvasWidth / boundingRect.width;\n    const viewToModelY = this.canvasHeight / boundingRect.height;\n    const x = (clientX - boundingRect.left) * viewToModelX;\n    const y = (clientY - boundingRect.top) * viewToModelY;\n    this._centerPosition = { x, y };\n  }\n\n  onMouseLeave(event: MouseEvent) {\n    if (!this.updateOnMouseEvents) { return; }\n    this._centerPosition = null;\n    this.update();\n  }\n\n  onMouseEnterOrMove(event: MouseEvent) {\n    if (!this.updateOnMouseEvents) { return; }\n    this.calculateMousePosition(event.clientX, event.clientY);\n    this.update();\n  }\n\n  onMouseScroll(event: WheelEvent) {\n    if (!this.updateOnMouseEvents) { return; }\n    let newZoomFactor = this._zoomFactor;\n    newZoomFactor -= event.deltaY / 1000;\n    if (newZoomFactor < this.minZoomFactor) { newZoomFactor = this.minZoomFactor; }\n    if (newZoomFactor > this.maxZoomFactor) { newZoomFactor = this.maxZoomFactor; }\n    if (this._zoomFactor !== newZoomFactor) {\n      this._zoomFactor = newZoomFactor;\n      if (this.zoomFactor !== this._zoomFactor) {\n        this.zoomFactorChange.emit(this._zoomFactor);\n      }\n      this.update();\n    }\n    event.preventDefault();\n    event.stopPropagation();\n  }\n\n\n}\n","import { NgModule } from '@angular/core';\nimport { NgMagnizoomComponent } from './magnizoom.component';\nimport { CommonModule } from '@angular/common';\n\n\n\n@NgModule({\n  declarations: [NgMagnizoomComponent],\n  imports: [\n    CommonModule\n  ],\n  exports: [NgMagnizoomComponent]\n})\nexport class NgMagnizoomModule { }\n"]}